{"version":3,"sources":["shared/components/UIElements/Card/Card.js","shared/components/Map/Map.js","places/components/PlaceItem.js","places/components/PlacesList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","center","zoom","mapRef","useRef","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","image","title","address","description","coordinates","onDelete","creatorId","id","useHttpClient","isLoading","error","sendRequest","clearError","useContext","AuthContext","userId","token","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","Authorization","equalId","ErrorModal","onClear","Modal","show","onCancel","header","contentClass","footerClass","footer","Button","onClick","inverse","danger","LoadingSpinner","asOverlay","src","alt","to","PlacesList","places","onDeletePlace","length","place","key","creator","location","UserPlaces","useParams","loadedPlaces","setLoadedPlaces","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.802feb57.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useRef } from 'react';\r\nimport './Map.css';\r\n\r\nconst Map = ({ center, zoom , style, className }) => {   \r\n    const mapRef = useRef();\r\n    useEffect(() => {\r\n        const map = new window.google.maps.Map(mapRef.current, { /* pointer to actual value of mapRef */\r\n            zoom, // object with configuration of the map\r\n            center\r\n         }); \r\n     \r\n         new window.google.maps.Marker({ position: center, map });\r\n    }, [center, zoom]); // rerender only if center of zoom is changed\r\n    return ( \r\n        <div \r\n            ref={mapRef}\r\n            className={`map ${className}`}\r\n            style={style}>\r\n        </div> \r\n    );\r\n};\r\n \r\nexport default Map;","import React, { Fragment, useState, useContext } from 'react';\r\nimport Card from '../../shared/components/UIElements/Card/Card'\r\nimport Button from \"../../shared/components/FormElements/Button/Button\";\r\nimport Modal from \"../../shared/components/Modal/Modal\";\r\nimport Map from \"../../shared/components/Map/Map\";\r\nimport { AuthContext } from '../../shared/context/AuthContext';\r\nimport ErrorModal from '../../shared/components/Modal/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nimport \"./PlaceItem.css\";\r\nconst PlaceItem = ({\r\n  image,\r\n  title,\r\n  address,\r\n  description,\r\n  coordinates,\r\n  onDelete,\r\n  creatorId,\r\n  id\r\n}) => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const { userId, token } = useContext(AuthContext);\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  const openMapHandler = () => setShowMap(true);\r\n\r\n  const closeMapHandler = () => setShowMap(false);\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true);\r\n  };\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n  \r\n  const confirmDeleteHandler = async () => { \r\n    setShowConfirmModal(false);\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/${id}`,\r\n        'DELETE',\r\n        null, // no body for 'DELETE' method\r\n        { Authorization: `Bearer ${token}` }\r\n      );\r\n      onDelete(id);\r\n    } catch (err) {}\r\n  };\r\n\r\n  const equalId = creatorId === userId;\r\n\r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n\r\n      <Modal \r\n        show = {showMap} \r\n        onCancel = {closeMapHandler}\r\n        header = {address}\r\n        contentClass = \"place-item__modal-content\"\r\n        footerClass = \"place-item__modal-actions\"\r\n        footer = {<Button onClick = {closeMapHandler}> Close</Button>}\r\n      >\r\n        <div className = \"map-container\">\r\n          <Map center = {coordinates} zoom = {16} />\r\n        </div>\r\n      </Modal>\r\n      <Modal \r\n        header = \"Are you sure?\" \r\n        footerClass = \"place-item__modal-actions\" \r\n        show = {showConfirmModal}\r\n        onCancel= {cancelDeleteHandler}\r\n        footer = {\r\n          <Fragment>\r\n            <Button inverse onClick = {cancelDeleteHandler}>\r\n              CANCEL \r\n            </Button>\r\n            <Button \r\n              danger onClick = {confirmDeleteHandler}> \r\n              DELETE \r\n            </Button>\r\n          </Fragment>\r\n        }\r\n      >\r\n        <p>\r\n          Do you indeed want to proceed and delete this place? Please note that it \r\n          can't be undone thereafter.\r\n        </p>\r\n      </Modal>\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n          <div className=\"place-item__image\">\r\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${image}`} alt={title} />\r\n          </div>\r\n\r\n          <div className=\"place-item__info\">\r\n            <h2>{title}</h2>\r\n            <h3>{address}</h3>\r\n            <p>{description}</p>\r\n          </div>\r\n\r\n          <div className=\"place-item__actions\">\r\n            <Button inverse onClick = {openMapHandler}>VIEW ON MAP</Button>\r\n            {equalId && <Button to={`/places/${id}`}>EDIT</Button>}\r\n            {equalId && <Button danger onClick = {showDeleteWarningHandler}>DELETE</Button>}\r\n          </div>\r\n        </Card>\r\n\r\n      </li>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PlaceItem;\r\n","import React from 'react';\r\nimport './PlaceList.css';\r\nimport Card from '../../shared/components/UIElements/Card/Card';\r\nimport Button from '../../shared/components/FormElements/Button/Button';\r\nimport PlaceItem from './PlaceItem';\r\n\r\nconst PlacesList = ({ places, onDeletePlace }) => {\r\n    \r\n    if (places.length === 0) {\r\n        return (\r\n            <div className = \"place-list center\"> \r\n                <Card>\r\n                    <h2>No Places Yet. Maybe Create One</h2>\r\n                    <Button to=\"places/new\"> SHARE PLACE </Button>\r\n                </Card>\r\n            </div>\r\n        ) \r\n    }\r\n\r\n    return (\r\n        <ul className = \"place-list\">\r\n            {places.map(place => {\r\n                return <PlaceItem \r\n                    key = {place.id} \r\n                    id = {place.id} \r\n                    image = {place.image}\r\n                    title = {place.title}\r\n                    description = {place.description}\r\n                    address = {place.address}\r\n                    creatorId = {place.creator}\r\n                    coordinates = {place.location}\r\n                    onDelete = {onDeletePlace}\r\n                />\r\n            })}\r\n        </ul>\r\n        \r\n    )\r\n}\r\n \r\nexport default PlacesList;","import React, { useEffect, useState, Fragment } from 'react';\r\nimport PlacesList from '../components/PlacesList';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/Modal/ErrorModal';\r\n\r\nconst UserPlaces = () => {\r\n  const userId = useParams().userId;\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const { places } = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\r\n        );\r\n        setLoadedPlaces(places);\r\n      } catch (err) {}\r\n    };\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  const placeDeletedHandler = deletedPlaceId => { // prev state is important so we need to use a function\r\n    setLoadedPlaces(prevPlaces =>\r\n      prevPlaces.filter(place => place.id !== deletedPlaceId)\r\n    );\r\n  };\r\n \r\n  return (\r\n    <Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className = \"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n        )}\r\n      {!isLoading && loadedPlaces && <PlacesList places = {loadedPlaces} onDeletePlace = {placeDeletedHandler}/>}\r\n    </Fragment>\r\n  )\r\n}\r\n \r\nexport default UserPlaces;"],"sourceRoot":""}