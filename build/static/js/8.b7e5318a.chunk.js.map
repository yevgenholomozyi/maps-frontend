{"version":3,"sources":["shared/components/UIElements/Card/Card.js","shared/components/UIElements/Avatar/Avatar.js","user/components/UserItem.js","user/components/UsersList.js","user/pages/Users.js"],"names":["Card","props","className","style","children","Avatar","src","image","alt","width","height","UserItem","name","placeCount","places","id","to","process","UsersList","users","length","map","user","key","Users","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedUsers","setLoadedUsers","useEffect","a","responseData","console","log","fetchUsers","ErrorModal","onClear","LoadingSpinner"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,+LCSEC,G,MAZA,SAAAJ,GACb,OACE,yBAAKC,UAAS,iBAAYD,EAAMC,WAAaC,MAAOF,EAAME,OACxD,yBACEG,IAAKL,EAAMM,MACXC,IAAKP,EAAMO,IACXL,MAAO,CAAEM,MAAOR,EAAMQ,MAAOC,OAAQT,EAAMQ,Y,QC2BpCE,EA/BG,SAAC,GAA6C,IAA3CJ,EAA0C,EAA1CA,MAAOK,EAAmC,EAAnCA,KAAcC,GAAqB,EAA7BC,OAA6B,EAArBD,YAAYE,EAAS,EAATA,GAClD,OACI,wBAAIb,UAAY,aAEZ,kBAACF,EAAA,EAAD,CAAME,UAAY,sBAEd,kBAAC,IAAD,CAAMc,GAAE,WAAMD,EAAN,YAEJ,yBAAKb,UAAY,oBACb,kBAAC,EAAD,CACIK,MAAK,UAAOU,sCAAP,YAA0CV,GAC/CC,IAAOI,KAIf,yBAAKV,UAAU,mBACX,4BAAKU,GACL,4BAAKC,EACe,IAAfA,EAAmB,SACpB,gBCUbK,G,MA9BI,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACjB,OAAKA,GAAUA,EAAMC,QAA2B,IAAjBD,EAAMC,OAajC,wBAAIlB,UAAY,cACXiB,EAAME,KAAI,SAAAC,GACP,OAAO,kBAAC,EAAD,CACHC,IAAOD,EAAKP,GACZA,GAAMO,EAAKP,GACXR,MAASe,EAAKf,MACdK,KAAQU,EAAKV,KACbE,OAAUQ,EAAKR,OACfD,WAAcS,EAAKR,OAAOM,aAlBlC,kBAACpB,EAAA,EAAD,KACI,yBAAKE,UAAU,UACX,kD,wBC4BLsB,UAhCD,WAAO,IAAD,EACoCC,cAA9CC,EADU,EACVA,UAAWC,EADD,EACCA,MAAOC,EADR,EACQA,YAAaC,EADrB,EACqBA,WADrB,EAEoBC,qBAFpB,mBAEXC,EAFW,KAEEC,EAFF,KAmBlB,OAfAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,+EAEYN,EAAY,GAAD,OACjCX,0CADiC,WAFvB,OAETkB,EAFS,OAMfH,EAAeG,EAAahB,OANb,gDAQfiB,QAAQC,IAAR,MARe,yDAAH,qDAWhBC,KACC,CAACV,IAGF,kBAAC,WAAD,KACE,kBAACW,EAAA,EAAD,CAAYZ,MAAOA,EAAOa,QAASX,IAClCH,GACC,yBAAKxB,UAAU,UACb,kBAACuC,EAAA,EAAD,QAGFf,GAAaK,GAAe,kBAAC,EAAD,CAAWZ,MAAOY","file":"static/js/8.b7e5318a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport './Avatar.css';\n\nconst Avatar = props => {\n  return (\n    <div className={`avatar ${props.className}`} style={props.style}>\n      <img\n        src={props.image}\n        alt={props.alt}\n        style={{ width: props.width, height: props.width }}\n      />\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\r\nimport './UserItem.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Avatar from '../../shared/components/UIElements/Avatar/Avatar';\r\nimport Card from '../../shared/components/UIElements/Card/Card';\r\n\r\nconst  UserItem = ({ image, name, places, placeCount, id }) => {\r\n    return (  \r\n        <li className = \"user-item\">\r\n\r\n            <Card className = \"user-item__content\">\r\n\r\n                <Link to={`/${id}/places`}>\r\n\r\n                    <div className = \"user-item__image\">\r\n                        <Avatar \r\n                            image = {`${process.env.REACT_APP_ASSET_URL}/${image}`}\r\n                            alt = {name}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"user-item__info\">\r\n                        <h2>{name}</h2>\r\n                        <h3>{placeCount} \r\n                            {placeCount === 1 ? ' place' : \r\n                            ' places'}\r\n                        </h3>\r\n                    </div>\r\n\r\n                </Link>\r\n\r\n            </Card>\r\n\r\n        </li>\r\n    );\r\n}\r\n \r\nexport default UserItem;","import React from 'react';\r\nimport UserItem from './UserItem';\r\nimport './UsersList.css';\r\nimport Card from '../../shared/components/UIElements/Card/Card';\r\n\r\nconst  UsersList = ({users}) => {\r\n    if (!users || !users.length || users.length === 0) {\r\n\r\n        return ( \r\n            <Card>\r\n                <div className=\"center\">\r\n                    <h2>No Users Found</h2>\r\n                </div>\r\n            </Card>\r\n        );\r\n\r\n    } \r\n\r\n    return (\r\n        <ul className = \"users-list\">\r\n            {users.map(user => {\r\n                return <UserItem \r\n                    key = {user.id} \r\n                    id = {user.id} \r\n                    image = {user.image} \r\n                    name = {user.name} \r\n                    places = {user.places}\r\n                    placeCount = {user.places.length}\r\n                />\r\n            })}\r\n\r\n        </ul>\r\n    )\r\n}\r\n \r\nexport default UsersList;","import React, { useEffect, useState, Fragment } from 'react';\n\nimport UsersList from '../components/UsersList';\nimport ErrorModal from '../../shared/components/Modal/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst Users = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedUsers, setLoadedUsers] = useState();\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users`\n        );\n        \n        setLoadedUsers(responseData.users);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchUsers();\n  }, [sendRequest]);\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedUsers && <UsersList users={loadedUsers} />}\n    </Fragment>\n  );\n};\n\nexport default Users;\n"],"sourceRoot":""}